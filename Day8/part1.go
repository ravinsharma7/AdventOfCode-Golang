package main

import (
	"fmt"
	"strings"
)

// Parse the input map and identify antennas
func parseMap(input string) ([][]rune, map[rune][][2]int) {
	lines := strings.Split(strings.TrimSpace(input), "\n")
	grid := make([][]rune, len(lines))

	// Map from frequency (character) to list of antenna coordinates
	antennas := make(map[rune][][2]int)

	for i, line := range lines {
		grid[i] = []rune(line)
		for j, ch := range line {
			if ch != '.' {
				antennas[ch] = append(antennas[ch], [2]int{i, j})
			}
		}
	}
	return grid, antennas
}

// Compute antinodes for a pair of antennas A and B
// Given A=(Ax,Ay), B=(Bx,By):
// Antinodes: N1 = 2A - B, N2 = 2B - A
func antinodesForPair(a, b [2]int) [][2]int {
	Ax, Ay := a[0], a[1]
	Bx, By := b[0], b[1]

	N1 := [2]int{2*Ax - Bx, 2*Ay - By}
	N2 := [2]int{2*Bx - Ax, 2*By - Ay}
	return [][2]int{N1, N2}
}

func main() {
	// Example input (from the problem statement)
	input := `
...O.....0...............................p..k.....
O.........o....w..T.........................p.....
..................w..........oM...................
.............................................Y....
o.............T...........................z.....pk
.....................................z..Y....t.F..
...........T..........................F.......Y...
...................A............z...k..M..........
....O.........j....w.....................M........
..........w....T..................M..k............
.............5.............................F.....t
......................A.............F....E........
.....................S.........A..................
.P................................................
........................A...E.............x...t...
............j.........................t.........x.
.......................j.........................x
....................................E........c....
.............P.......E............................
...............j..5...............q...............
..............P..............................Qc...
..........C..........s................c........x..
.............C...r................................
.....C......V..........q...................Q......
...........yX.........q...................Q.......
.....X....................e.............m.........
.2.................e..7....m.......c..............
......i..........e...K..............f....U...WQ...
...X....................e....................V...Y
...............5..X.....0.........................
..C..i......5..3...sK......J.........f..B.........
2............3.............0I...a.........BNb.....
.........................K............m...........
.r........3...............s....7...m.v...f.......b
........3........7.....Iy..........q...b.N........
.....R.1.......................n.....a.B.......VN.
......R.........9...................a...W.........
..........7.6................S....................
..............r.......s...0........nb....W..f..B..
...2...........I......K...........................
..............................u...n............U..
............r......y.............O............W...
.......R..........v..u................N...V.......
..........R.8..4.9..y........u....................
...8...............v................J.............
.....8..............4.........Z.........n.....J.U.
...........4i....................Z..S.............
..............9...........1.u.S................J..
8...6....9..4......a........Z.1...................
....................v..i.............Z............`

	grid, antennas := parseMap(input)
	rows := len(grid)
	cols := len(grid[0])

	// Set to store unique antinode positions
	antinodeSet := make(map[[2]int]bool)

	// For each frequency, consider all pairs of antennas
	for _, antList := range antennas {
		// If only one antenna of this frequency, no antinodes
		if len(antList) < 2 {
			continue
		}
		// Generate all pairs
		for i := 0; i < len(antList); i++ {
			for j := i + 1; j < len(antList); j++ {
				a := antList[i]
				b := antList[j]
				nodes := antinodesForPair(a, b)
				for _, n := range nodes {
					x, y := n[0], n[1]
					if x >= 0 && x < rows && y >= 0 && y < cols {
						antinodeSet[n] = true
					}
				}
			}
		}
	}

	// Count how many unique antinode positions
	result := len(antinodeSet)

	fmt.Println(result)
}
